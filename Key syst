local Players = game:GetService('Players')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local RunService = game:GetService('RunService')

local player = Players.LocalPlayer

local Module = require(ReplicatedStorage.Modules.SharedLocal)
local punchEvent = ReplicatedStorage.Events.Punch
local upgradeEvent = ReplicatedStorage.Events.UpgradeAbility

for _, v in next, getconnections(player.Idled) do
    v:Disable()
end

if not player.Character then
    repeat wait();
        getsenv(player:WaitForChild('PlayerScripts'):WaitForChild('IntroScript')).Play()
    until player.Character and Module.IsValidActor(player.Character)
end

spawn(function()
    while task.wait() do
        getsenv(player.PlayerScripts.GameClient)._G.energy = math.huge
    end
end)

function lightPunch()
    task.spawn(function() punchEvent:FireServer(0,0.1,1) end)
end

function heavyPunch()
    task.spawn(function() punchEvent:FireServer(0.4,0.1,1) end)
end

function goInvisible()
    invisibleStatus = true
    local ogPosition = player.Character.HumanoidRootPart.CFrame
    
    player.Character.HumanoidRootPart.CFrame = CFrame.new(-2463.92822, 256.457916, -2009.25574)
    wait(0.5)
    local Clone = player.Character.LowerTorso.Root:Clone()
    player.Character.LowerTorso.Root:Destroy()
    Clone.Parent = player.Character.LowerTorso
    wait(0.5)
    player.Character.HumanoidRootPart.CFrame = ogPosition
end
player.Character.Humanoid.Died:Connect(function()
    invisibleStatus = false
end)

function upgradeStatistic(stat, types, amount)
    if stat == nil then return end
    if types == nil then return end
    if amount == nil then return end

    if types == "default" then
        upgradeEvent:InvokeServer(stat)
    elseif types == "fast" then
        for i = 1, amount do
            task.spawn(function()
                upgradeEvent:InvokeServer(stat)
            end)
        end
    end 
end